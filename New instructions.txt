RPG Archivist Data Model and UI Blueprint
This document outlines the structured data model and user interface components for the RPG Archivist system, incorporating narrative-driven campaign enhancements and a clear player–GM relationship structure. Each section below is organized by entity type, detailing its fields, UI elements, relationships to other entities/users, and opportunities for AI integration. The goal is to provide a comprehensive, consistent blueprint for development, ensuring that narrative context and collaboration are first-class features.
RPG World
Fields (Required & Optional)
Name (Text, Required): The name of the game world or setting.
Creator (User Reference, Required): The user who created/owns the world (usually a GM).
Description (Long Text, Optional): A rich description of the world’s overall setting, history, and atmosphere.
Genre/Setting (Text, Optional): Tags or keywords for the world’s genre (e.g., fantasy, sci-fi) and tone.
World Map (Image/File, Optional): An uploaded map image for the world (used as an overview or for pinning locations).
Tags (List of Text, Optional): Descriptive tags or keywords for the world, e.g., “steampunk, high-magic” (could be user-defined or auto-generated).
Shared Lore (Boolean, Optional): Indicates if lore entries (characters, locations, etc.) in this world are shared across multiple campaigns (for “shared worlds” functionality).
Privacy Setting (Enum, Optional): Controls access (e.g., Private – only creator and invited GMs; Shared – players in linked campaigns can view world-level info).
Created Date (Date, Auto): Timestamp when the world was created (for record-keeping).
UI Components and Interactions
World Selection/Listing: On the user’s dashboard, list all worlds they have created or have access to. Each entry shows the World Name and key details (creator, genre, number of campaigns).
World Creation Form: A form to create/edit a world, including fields for Name, Description (with a rich-text editor for formatting), genre tags, and an option to upload a map image.
World Overview Page: Displays the world’s Name, Description, and world map (if provided). It also lists related entities: campaigns set in this world, and possibly global lore entries (locations, factions, etc.) if the world is used as a container for shared lore.
Lore Catalog (World Scope): If Shared Lore is enabled, an index of all Characters, Locations, Factions, and Items defined at the world level (not tied to a single campaign). This behaves like a wiki for the world.
Map Interface: If a World Map is uploaded, an interactive map view allows placing location markers. Users (GM and players with permission) can click map markers to view the corresponding Location entry.
World Management: UI controls for the creator to manage the world – e.g., invite co-GMs to the world (if supported), adjust privacy settings, or delete the world.
Relationships to Other Entities
User (Creator) – One-to-One: Each world is created by a single user (typically a GM). That user is the world’s owner/administrator.
Campaigns – One-to-Many: A world can host multiple campaigns. Each Campaign may optionally link to one World (a campaign set in that world). If a campaign is linked, it inherits the world’s lore context.
Locations – One-to-Many (Optional): World-level locations that are not campaign-specific. These locations belong to the world and can appear in any campaign under that world.
Factions, Characters, Items – One-to-Many (Optional): Similar to locations, the world can have global factions, notable NPCs or legendary items defined. Campaigns linked to the world can reference these. (If Shared Lore is false, lore entities reside within individual campaigns only.)
Lore Entries in Campaigns – Interconnected: Even when lore is campaign-specific, the world provides a top-level grouping. A campaign’s lore entries may cite the world context. For example, a Character might have an attribute “Home World” referencing this entity if cross-world travel occurs (rare).
AI Integration
Field-Level Assistance: When creating a new world, the GM can input a few keywords or inspirations and use AI to generate a rich World Description (history, cosmology, etc.). Given prompts like “grimdark post-apocalyptic fantasy world”, the AI can suggest descriptive text or even genre-specific tags.
Lore Generation: The AI can propose foundational lore for the world. For instance, it might generate a list of major locations, factions, or a creation myth based on the world description, which the GM can accept or refine.
Map and Geography: With a text description of geography, an AI service could generate a basic world map or place names, which the user can adjust. (This could be an integration point with image generation, though not necessarily in MVP.)
Full-Context World QA: Using all the lore and histories in the world, an AI assistant (akin to a “world chatbot”) can answer questions about the world’s lore
rpgarchivist.io
. For example, the GM or players (if allowed) could ask “Who are the major deities in this world?” and get answers drawn from the world’s stored information.
Continuity Checks: As campaigns progress, the AI can help ensure narrative consistency within the world. If multiple campaigns occur in the same world, the AI can cross-reference events. For example, if Campaign A destroyed a city in the world’s lore, the AI can remind the GM in Campaign B (set later in the same world) that the city is gone, ensuring continuity.
Dynamic Content: AI can assist the GM in expanding the world on the fly. If players venture to a part of the world that isn’t detailed, the GM can query the AI for help (e.g., “Describe a village in the northern tundra of this world”), and use the result to quickly fill in world details consistent with the existing setting.
Campaign
Fields (Required & Optional)
Title (Text, Required): The name of the campaign (e.g., “The Dragon’s Gambit”).
World (World Reference, Optional): Link to the RPG World the campaign is set in. If provided, the campaign can reuse that world’s lore; if not, the campaign has its own self-contained world context.
Game System (Text, Optional): The RPG system or edition (e.g., D&D 5e, Pathfinder 2e). This is mainly informational, guiding how players/GMs might structure content.
Description (Long Text, Optional): A synopsis or description of the campaign premise and setting. This can include initial plot hook, tone, or any session-zero info.
Game Master (GM) (User Reference, Required): The primary GM user who manages the campaign. (This is typically the campaign creator/owner.)
Players (List of User References, Optional): Users who are participants in the campaign as players. (Stored via a relationship table linking users with a role; see Relationships.)
Status (Enum, Optional): Current status of the campaign – e.g., Ongoing, Completed, Upcoming, On Hiatus. (Useful for filtering or display on the dashboard.)
Start Date (Date, Optional): The date of the first session or campaign start (for reference).
End Date (Date, Optional): The date the campaign concluded (if Status is Completed).
Themes/Tags (List of Text, Optional): Narrative keywords for the campaign’s themes or mood (e.g., “political intrigue, horror, redemption”). These tags help categorize the story and could be user-defined.
Main Plot Summary (Long Text, Optional): A running summary of the campaign’s overarching story. This field can be updated over time (manually or via AI) to reflect major developments, serving as a “story so far” for quick reference.
Story Arcs (List of Story Arc References, Optional): A collection of major narrative arcs or quests within the campaign. Each arc groups related events (detailed in the Story Arc entity). This field essentially links the campaign to its arcs (one-to-many relationship).
Current Session Number (Integer, Auto): The count of sessions that have been logged in the campaign. (This can be derived from Sessions list but may be stored for convenience and shown on the UI.)
Last Session Summary (Long Text, Auto/Optional): An auto-generated recap of the last session’s events. This is updated by AI after each session and can be edited by the GM.
GM Notes (Long Text, Optional, Private): Freeform notes visible only to the GM (or co-GMs). This may include planning notes, secrets, or future plot ideas.
Player Notes/Comments (Long Text, Optional): If enabled, a section for players to leave notes or comments about the campaign (for example, planning out-of-character goals or feedback). This could be a single shared field or a collection of comments; in the data model it might be a separate entity, but from the campaign’s perspective it’s an associated content.
UI Components and Interactions
Campaign Dashboard: The main page for the campaign, providing an overview and navigation hub. It includes:
Campaign Header: Displays the Title, linked World name (if any), GM name, and status. Possibly also campaign tags/themes for quick reference.
Description & Summary: Shows the campaign Description or premise, and a collapsible “Story so far” section (populated by the Main Plot Summary field) to quickly brief anyone on past events.
Timeline of Sessions: A chronological list or timeline widget of all sessions
thedailydungeonmaster.com
. Each session entry shows the Session number, date, and title, and perhaps an icon if a summary is available. Clicking a session opens the Session detail page.
Recent Lore Entries: Quick links to recently mentioned or edited entries (characters, locations, etc.)
thedailydungeonmaster.com
. This helps the GM and players jump to new or important lore that came up in the last session.
World Map Panel: If a World map or campaign map is available, a small preview or link is shown
thedailydungeonmaster.com
. Clicking it opens a larger interactive map.
Search and Filter Bar: Tools to search the campaign’s content
thedailydungeonmaster.com
. This allows filtering by entity type (character, location, etc.) or full-text search in transcripts and lore. It enables quick retrieval of information (for example, a player searching “rune” to find which session a rune was mentioned).
Story Arcs Section: A widget or list summarizing active Story Arcs. Each arc might be shown with a progress indicator or status (e.g., Arc Name – Ongoing). Clicking an arc goes to the Story Arc detail.
Player Roster: A list of all Player characters and their players. Likely shown as character names with player usernames in parentheses or tooltips. The GM is labeled distinctly (e.g., “GM: Alice”).
Actions Toolbar: Key actions like Add Session (to upload or create a new session log), Invite Player (if GM), Campaign Settings/Edit (GM only), and possibly Open Chatbot (to ask the AI questions about the campaign world).
Campaign Creation/Edit Form: UI form to create a new campaign or edit campaign settings. Fields include Title, attach to an existing World (dropdown list of user’s worlds or option to create new world inline), Game System, Description, and initial tags/themes. The GM is by default the creator; additional GM users could be added here if multi-GM support exists. Privacy options for player contributions (whether players can edit lore or only view) are configured here as well.
Invite Players Modal: Allows the GM to invite players via username or email. It may list current players and their roles. Invited players receive notifications and will see the campaign on their dashboard once they accept.
Campaign Sidebar/Navigation: On any campaign page (dashboard, session, lore entry, etc.), a sidebar lists sections: Sessions, Characters, Locations, Factions, Items, Story Arcs, Settings. This provides quick navigation within the campaign data.
Permissions UI: If players are allowed to contribute edits or comments, the UI might indicate editable fields or provide an “edit suggestion” feature. For example, on a lore entry page, a player might see an “Add Comment” or “Suggest Edit” button (with changes pending GM approval).
Campaign Deletion/Archive: Option accessible to the GM in campaign settings to archive or delete the campaign (with appropriate warnings/confirmations).
Relationships to Other Entities
RPG World – Many-to-One (Optional): A campaign may be linked to one World. If linked, the campaign can access that world’s global lore entries and map. Multiple campaigns can reference the same world (enabling a shared setting for different storylines).
User (GM) – Many-to-One: Each campaign has one primary GM (owner). (The model could allow multiple GMs via the Players list with a “GM” role flag, but fundamentally one user is designated as the campaign owner/GM.)
Users (Players) – Many-to-Many: A campaign has many participating players. This is implemented via a join table CampaignParticipant (with fields: user reference, campaign reference, role). Role could be “GM” or “Player” for clarity. 
thedailydungeonmaster.com
Characters – One-to-Many: The campaign encompasses many Characters. Every player character (PC) and significant NPC is recorded as a Character entry under the campaign. (If using a World, characters might be global to the world or local to the campaign – see Character entity.)
Locations – One-to-Many: The campaign includes numerous Location entries (places visited or mentioned). These may be defined within the campaign or drawn from the linked World’s location list.
Factions – One-to-Many: The campaign will have multiple Faction entries (organizations, groups) relevant to the story. Again, these could be campaign-specific or global via World.
Items – One-to-Many: Important Items (artifacts, treasures) are tracked as entries in the campaign.
Sessions – One-to-Many: A campaign is composed of Sessions (each session being a game meeting or chapter in the story). All Session records are linked back to the campaign.
Story Arcs – One-to-Many: The campaign can have multiple Story Arcs (narrative threads). Each arc belongs to a single campaign.
Cross-Links: All lore entities (Characters, Locations, Factions, Items) within the campaign are interconnected; they often reference each other and specific sessions
thedailydungeonmaster.com
thedailydungeonmaster.com
. For example, a Character entry links to the Location of their origin; a Session links to all Characters present. These relationships form a graph of lore, which the system maintains for search and context.
User Contributions – Many-to-Many: If players can contribute, there might be an implicit relationship of users to lore entries they have edited or commented on (for tracking purposes). But primarily, user contributions are moderated by the GM.
AI Integration
Session Summaries & Recaps: After each session is uploaded or transcribed, an AI service automatically generates a Session Summary (for the session’s own record) and updates the Main Plot Summary of the campaign. This keeps the campaign’s storyline up-to-date without the GM manually writing summaries. The GM can review and edit these summaries for accuracy.
Narrative Arc Identification: The AI analyzes session transcripts and notes to detect emerging Story Arcs. For example, if across several sessions the players are investigating a cult, the AI might suggest creating a “Cult Investigation” story arc and associate the relevant NPCs and clues with it. This helps the GM maintain narrative structure, especially in player-driven games.
Continuity and Foreshadowing: The AI can track plot points and remind the GM of unresolved threads. For instance, if an NPC made a promise or a villain escaped in an earlier session, the AI might highlight this in the campaign dashboard (“Unresolved: The whereabouts of Villain X are still unknown”) ensuring it’s addressed in a future session. It effectively acts as a continuity assistant, preventing forgotten story elements.
Dynamic Prep Assistance: Given the full context of the campaign (world lore, past sessions, characters), the AI can help the GM prepare for the next session. On request, it could generate encounter ideas, narrative events, or descriptive text tailored to the current state of the campaign. For example, the GM can ask, “What might happen next based on the current story arcs?” and get suggestions (e.g., “The cult makes a move against the capital – perhaps an assassination attempt during a festival.”). This aligns with tools that assist GMs in narrative brainstorming
arxiv.org
.
World Chatbot: Within the campaign UI, an AI-driven chatbot (using Retrieval Augmented Generation) is available to answer questions about the campaign’s lore in real-time
rpgarchivist.io
. Both GM and players (with appropriate permissions) can query it. For example, a player could ask, “What do we know about the Blackwood Forest?”, and the bot will retrieve details from the campaign’s sessions and location entries to answer. This feature leverages the interconnected archive as a knowledge base, enhancing accessibility to the lore.
Player Agency Enhancement: To support a collaborative storytelling approach, the AI can serve players as well. For instance, a player might privately ask the AI, “Does my character recall any lore about the ancient rune we found?”. The AI (using the campaign context and that character’s knowledge) can provide an answer from the character’s perspective, which the player can use in-game. This must respect GM-defined boundaries (the AI only reveals what the character would reasonably know, avoiding spoilers).
Content Generation and Editing: When creating or updating campaign fields like Description or Themes, the GM can use AI suggestions. For example, if the GM enters a rough idea for the campaign premise, the AI can polish it into a well-written blurb or add thematic flavor. Similarly, for Game System or rules-related info, the AI might suggest modules or relevant mechanics (though actual rules integration is minimal in Archivist’s scope).
Safety and Calibration: If the campaign uses content guidelines (lines and veils, or tone preferences), the AI can be tuned to respect those. It will avoid generating inappropriate content and might even flag if something in a user’s contribution violates the agreed tone, acting as a subtle moderator. (This is more of a content filter function attached to AI outputs for the campaign.)
Summative Reports: At milestones (e.g., mid-campaign or end of an arc), the AI can produce a campaign report – a comprehensive summary of events, characters and their development, and open plot points. This can serve as a reference or even a document to share. For completed campaigns, this becomes an epilogue write-up the GM can keep.
Session
Fields (Required & Optional)
Session ID/Number (Auto/Integer, Required): A sequential identifier for the session (often just numbering from 1 upward in the campaign).
Title (Text, Optional): A short descriptive title for the session (e.g., “Session 5: Into the Dark Woods”). If not provided by the user, it can default to "Session X" or be generated.
Date (Date, Optional): The date the session took place (game date or real date). Useful for chronology on the timeline.
Transcript/Chronicle (Long Text or File, Optional): The full narrative log of the session. This may be a text transcript of audio (captured via the system’s speech-to-text) or a manually written session report. It includes dialog and events in sequence.
Participants (List of Character References, Auto): The characters present in the session. Based on the transcript, the system automatically tags which Characters (PCs or NPCs) were mentioned or involved
thedailydungeonmaster.com
thedailydungeonmaster.com
. This can also be edited manually if needed.
Summary (Long Text, Auto/Optional): A concise summary of the session’s events, auto-generated by AI after the session, which the GM can edit. This describes key plot developments and outcomes.
Key Moments (List of Text or Marked Excerpts, Optional): Highlights or notable moments from the session. For example, a dramatic quote, a critical dice roll event, or a plot twist reveal. The GM or players (if allowed) can mark certain lines in the transcript as “moments”. The system might also auto-suggest moments (e.g., “The dragon was defeated”).
GM Notes (Session) (Long Text, Optional, Private): Private notes for the GM about this session – e.g., retroactive observations, things to follow up on next time, or secret events that happened behind the scenes.
Log Version (Integer, Auto): A version number for the transcript if it’s edited post-session. This helps track if the GM has corrected or annotated the transcript after the live capture.
Related Arcs (List of Story Arc References, Auto/Optional): Which Story Arcs were advanced or touched in this session. This could be manually tagged by the GM or suggested by AI (e.g., if the “Rescue the Prince” arc had major progress this session, link it here).
Audio Recording (File Reference, Optional): If the session was recorded via audio and stored, a link to that audio file. (The transcript is derived from this if using speech-to-text.)
Duration (Numeric, Optional): Session length in hours/minutes, if logged (could be auto-calculated from audio or input by GM for context).
UI Components and Interactions
Session List/Timeline: On the campaign dashboard, sessions are listed in order. Each entry shows the Session Number, Title (if any), Date, and perhaps a one-line summary or list of participating characters. This timeline allows quick navigation. A “New Session” button here allows adding a session.
Session Detail Page: Dedicated page for a single session’s details:
Header: Session Title (or “Session X”), Date, and the list of Characters present (with links to their profiles). The header might also show which story arc(s) this session is part of.
Transcript Viewer: The main content area shows the session transcript. This can be a scrollable text area, possibly segmented by speaker (if the system detected speakers). Important names of characters, locations, items in the text might be hyperlinked to their entries (the system automatically interconnects lore references in the text
thedailydungeonmaster.com
). For example, the first mention of “Lord Brixton” in the text would be linked to the Lord Brixton character entry.
Editing Tools: If the GM (or an editor) hovers over the transcript text, tools allow correction of the text or annotation. They can fix transcription errors, add punctuation, or mark certain text as OOC (out-of-character chatter to possibly exclude). Version control ensures changes are saved.
Key Moments Highlight: A sidebar or inline highlights for Key Moments. These could appear as bookmark icons in the transcript margin or as a list above/below the transcript. Clicking a moment jumps to that part of the transcript. If AI has suggested highlights (e.g., “Major plot twist: John reveals he is the lost heir.”), those are shown, and the GM can confirm or adjust them.
Summary Panel: The AI-generated Summary of the session is displayed, either at the top or bottom of the page. This is a few paragraphs describing what happened. The GM can edit this text directly if needed (for accuracy or style). There may also be a “Regenerate Summary” button to invoke the AI again if the first attempt wasn’t satisfactory.
GM Notes: A collapsible section visible only to the GM (and co-GM). Here the GM can write or view their private notes about this session. This section might include bullet prompts like “Things to remember next time” or “XP given” etc., depending on GM needs (these are freeform).
Navigation Links: Buttons or links to go to Previous Session and Next Session easily, and back to the Campaign Dashboard.
Download/Export: An option to download the transcript (and possibly summary) as a text or PDF file
rpgarchivist.io
. This allows offline archiving or sharing outside the app.
Comment Section (if enabled): If players are allowed to comment, a section for discussion about the session could appear (like a comment thread where players reflect or ask questions).
Add Session Workflow: The GM can add a session via:
Recording Upload: Upload an audio file of the session which the system will transcribe.
Live Transcription (if supported): Indicate the system to start listening via Discord or another integration for real-time transcription.
Manual Entry: Or directly write/paste a session log.
In all cases, after adding, the session entry is created and the AI processes it (transcription, entity extraction, summary generation).
Transcript Verification UI: After an automatic transcription, there might be an “Awaiting GM Review” state for the session. The GM can review the raw transcript for obvious errors. The UI could highlight low-confidence sections for the GM to check (e.g., if audio was unclear). This ensures the archived text is clean.
Entities Detected Alert: The UI may show a list of newly detected names (characters, places, etc.) that came up in the transcript. For example: “New entity detected: Blackwood Forest (Location). Create entry?” The GM can confirm creation of a lore entry directly from here, or merge with an existing entry if it was a reference to something known. (Archivist does some of this automatically, creating placeholders for new NPCs/locations
thedailydungeonmaster.com
).
Session Metadata Edit: Ability to edit session Title, Date, and assign it to story arcs. Title and date can be changed via an edit button near the header. Assigning to story arcs might be a multi-select dropdown listing known arcs.
Session Deletion: If needed, a control for the GM to delete a session (with confirmation). This would remove transcript, summary, etc., and update any lore references (likely handled by the system).
Relationships to Other Entities
Campaign – Many-to-One: Each Session belongs to one Campaign (the campaign under which it was recorded).
Characters – Many-to-Many: Sessions have many Characters that participated or were mentioned. Each Character entry keeps a list of Sessions it appeared in
thedailydungeonmaster.com
. This relationship is typically auto-maintained by parsing the transcript for character names. (In the data model, a join table CharacterAppearance could link SessionID and CharacterID, possibly with details like count of mentions or whether they were active or just mentioned.)
Locations – Many-to-Many: Similarly, each Session can mention multiple Locations. A join table links sessions and locations (for “LocationAppearance”), enabling the system to list sessions by location and vice versa.
Factions – Many-to-Many: If factions are discussed or involved (e.g., the party negotiated with a guild during the session), those factions are linked to the Session. This allows tracking of faction appearances over time.
Items – Many-to-Many: Important Items obtained, used, or referenced in the session are linked. For example, if the Sword of Dawn was found in session 3, Session 3 links to the Sword of Dawn item entry (and that item’s history notes session 3 as when it was found).
Story Arcs – Many-to-Many: A session can contribute to multiple story arcs. E.g., Session 10 might progress both the “War with the Orcs” arc and a personal character arc. Thus, there’s a link between Session and Story Arc (with perhaps a note of what happened for that arc in this session).
User (GM/Players) – Many-to-Many (Implicit): While users don’t directly attach to sessions in the data model, each session is implicitly tied to the GM (as the recorder/editor) and the players (through their characters present). In transcripts, a “speaker” identifier might link lines to a Player’s character. Additionally, if doing analytics, one could associate a session with which players were present (if someone was absent, etc.), but that’s beyond core scope.
Chronology – Sequence: Sessions are inherently ordered within a campaign. Each session knows the previous and next session (based on date or number). This is not a relationship entity per se, but important for UI navigation and timeline integrity.
Transcripts and AI Data – One-to-One: A session may have an associated AI embedding or index for the chatbot’s use (as described in the FAQ
rpgarchivist.io
). This isn’t an entity the developer sees, but behind the scenes each session’s text is linked to its AI representation for Q&A retrieval.
AI Integration
Automated Transcription: If audio is provided (via upload or live), the AI performs speech-to-text to produce the session Transcript. It is tuned for RPG terminology (fantasy names, etc.) to minimize errors. The AI labels different speakers if possible (using voice differentiation or cues like character names spoken). This dramatically reduces manual note-taking by creating a written log of what was said.
Entity Extraction: As part of processing the transcript, the AI extracts proper nouns and terms that likely correspond to Characters, Locations, Factions, or Items
thedailydungeonmaster.com
thedailydungeonmaster.com
. It cross-references existing entries (to avoid duplicates) and either links the transcript text to an existing entry or creates a new placeholder entry for each new entity. For example, “Arwyn” is identified as a name not seen before – AI creates a new Character entry named Arwyn and links all references to it. This real-time categorization builds the campaign wiki as you play
thedailydungeonmaster.com
.
Summary Generation: After a session’s transcript is confirmed, the AI generates a Session Summary. It condenses the events into a few paragraphs, emphasizing narrative flow (e.g., “The party ventured into the Dark Woods and confronted an undead bear. They discovered a ruined altar and retrieved a mysterious amulet.”). The AI uses knowledge of prior sessions to contextualize events (for instance, noting that the amulet relates to a prophecy from earlier). The summary can be edited by the GM, and the AI can refine it on request if something is missing or incorrect.
Highlight Extraction: The AI can flag Key Moments in the transcript. It looks for high-emotion or plot-critical moments (raised voices, exclamations, keywords like “killed” or “treasure” or significant NPC dialogue). For example, “Boss Orc: You may have won this time!” might be flagged as a dramatic moment. These suggestions appear to the GM, who can accept or adjust them. This feature helps in quickly recalling the most crucial parts of a long session.
Quality Assurance & Correction: The AI can be prompted to do a proofreading pass on the transcript. While it won’t change the transcript automatically in real-time (to avoid altering what was actually said), it can offer a version with suggested corrections for the GM to review
thedailydungeonmaster.com
. For example, it might note: “Did you mean ‘Griffin’ instead of ‘Griffen’?” as a spelling consistency suggestion. The GM can quickly apply these to clean up the log.
Interactive Q&A: During or after the session, the GM (or players, if allowed) can ask the AI chatbot questions about this session. For example, “What clues did we find this session?” The AI will fetch answers from the transcript (like summarizing the clues mentioned). This use of AI as a reference tool is especially helpful between sessions, so players don’t have to reread the entire log.
Session Planning: Based on what happened in the session, the AI can generate a brief “Next Session Forecast” for the GM. Not a deterministic plan, but suggestions of where the story could go or things to address. E.g., “The players seem interested in investigating the amulet – next session might involve research in the library or consulting a sage.” This helps the GM prepare relevant content.
Sentiment/Engagement Analysis: (Optional analytics) The AI could analyze the session transcript for player engagement indicators – which scenes had the most interaction or excitement (measured by dialogue volume or sentiment). It could present the GM with a post-session analysis like “Combat with the undead bear had high engagement, puzzle in the crypt had lower engagement.” While not core to data model, it’s an AI feature that can guide the GM in adjusting pacing or style.
Speech Attribution: If transcripts include speakers, AI might learn to associate certain voice or speaking style with a character. Over time it could auto-tag lines with character names. This helps in the UI to distinguish dialogue (like a script). It also ties into the Characters’ “Appearances” – if the AI knows which character spoke a line, it can more accurately update that character’s appearance count and context in sessions.
Retcon Assistance: If the group decides to retcon (retroactively change a minor detail in the story from a past session), the GM can adjust the transcript or notes. The AI can help by propagating that change in summaries or relevant references. For example, if the innkeeper’s name was changed from Bob to Rob, the AI will ensure future references and summaries use “Rob” and might even offer to update past text occurrences for consistency.
Character
Fields (Required & Optional)
Name (Text, Required): The character’s name. Must be unique within the campaign (or world) context for clarity.
Type (Enum, Required): The category of character – e.g., Player Character (PC), Non-Player Character (NPC), or perhaps Creature. This helps filter and manage characters.
Player (User Reference, Optional): If this is a PC, link to the User who plays the character. NPCs have this field empty or marked as GM-controlled.
Description (Long Text, Optional): A general description of the character’s appearance, personality, and role in the story. For NPCs, written by the GM; for PCs, often written by the player (subject to GM approval).
Backstory (Long Text, Optional): The character’s history or origin story. This can include important past events, motivations for adventuring, and connections to the world. For PCs, players provide this; for NPCs, GMs outline as needed.
Attributes/Stats (Structured or Text, Optional): Any game-related attributes. This could be a simple text field or a structured sub-entity depending on system (e.g., level, class, abilities for a D&D character). Archivist primarily is system-agnostic, so this might be a freeform or external link to a character sheet rather than a full stat block in the data model.
Goals/Motivations (Text, Optional): A short list or description of the character’s current goals, drives, or what they seek in the narrative. For example, “Revenge on the assassin’s guild” or “Protect the holy grove”. This field emphasizes narrative purpose.
Alignment/Morality (Text, Optional): A descriptor of the character’s moral or ethical stance (e.g., Lawful Good, Chaotic Neutral in D&D terms, or a freeform description like “pragmatic opportunist”). This adds narrative flavor.
Relationships (List of Character References, Optional): Key relationships to other characters, with notes. For example, Brother of [Alice], Enemy of [Goblin King]. This can be many-to-many; here it would likely be stored as separate relationship entries but displayed as a list of links with relationship labels.
Affiliation/Faction (Faction Reference, Optional): The faction or organization the character is affiliated with, if any. For NPCs this might be their employer or allegiance; for PCs perhaps their guild or party name.
Home Location (Location Reference, Optional): The character’s origin or home base location. This links the character to a Location entry.
Current Status (Text/Enum, Optional): Status in the narrative – e.g., Alive, Deceased, Missing, Petrified. Useful for keeping track of NPCs especially (so players know if someone is dead or alive).
Portrait Image (Image/File, Optional): An avatar or portrait for the character. Used as an icon in the UI (e.g., next to their name on lists, or at the top of their profile).
Appearances (List of Session References, Auto): A list of all Sessions where this character has appeared or been mentioned
thedailydungeonmaster.com
. The system maintains this list automatically through transcript analysis. Each appearance might store context (like “active participant” vs “mentioned in dialogue”). Shown to GM and players for recap purposes.
Tags (List of Text, Auto/Optional): Keywords automatically associated with the character. These could come from how the character is described or used. For example, tags might include their role (“knight, shopkeeper”), species (“elf, dragonborn”), or notable traits (“vengeful, honorable”) if the AI or GM adds them. Tags help in searching and filtering characters.
Secret Notes (Long Text, Optional, GM-Only): Hidden information about the character that only the GM can see. For NPCs, this might be their true agenda or a secret identity. For PCs, could be secrets the player shared with GM or surprises planned for later.
Last Updated (DateTime, Auto): The last time this character entry was modified (useful for knowing recent changes, especially if players edit their PC’s info).
UI Components and Interactions
Character List: Within a campaign (or world), there is a directory of Characters. This list can be filtered by Type (PC vs NPC) and sorted by name or last appearance. Each entry typically shows the character’s Name, Type icon, maybe a small portrait, and perhaps an indicator of recent activity (e.g., “seen in Session 12”). PC entries might highlight the player’s name. NPC entries might have a tag like “NPC” or be visually distinct.
Character Profile Page: The main page for a character’s details:
Header: Character Name prominently, with their portrait image if available. Type is shown (like a badge “Player Character” or “NPC”). If it’s a PC, the player’s name is shown (e.g., “Played by JohnDoe”). If it’s an NPC, possibly show “NPC – created by GM”.
Basic Info: Key fields like race/class (if provided), affiliation, alignment could be displayed in a small info box or bullet list at the top.
Description & Backstory: The description of the character is presented, followed by their backstory. This is narrative text that players and GM can read to understand the character. If the backstory is long, it might be collapsible or on a separate tab.
Goals/Motivations: A section listing what the character wants or is currently aiming to do. This might be updated as the campaign progresses for PCs or used as a reference for NPC behavior.
Relationships: An area showing known relationships to other characters. This could be a simple list (Name – relationship label). For example: “Alice – Sister”, “Goblin King – Nemesis”. Each name is a link to that character’s page. (This requires the data of character-character relationships, which might be managed through a sub-form or on one side of the relation only.)
Affiliation/Faction: If the character has a Faction, show the faction’s name (with link to that faction page) and perhaps their rank or role in it if noted.
Home/Location: If a home location is specified, display it as “Home: [Location Name]” (linkable).
Character Story/Timeline: A chronological list of the character’s notable appearances and events. This draws from the Sessions: e.g., “Session 3: Joined the party at Greenest”, “Session 5: Lost his sword in battle with orcs”. Essentially, it’s a filtered campaign timeline just for this character, highlighting moments involving them. (The AI could assist in summarizing their involvement in each session.)
Inventory/Items: (If tracked) A list of Items currently carried or owned by the character, each linking to the Item entry. For NPCs, this might include notable possessions. For PCs, it might not be exhaustive (since players manage their sheet elsewhere) but could list story-significant items (e.g., artifacts).
Notes/Secrets: For GMs viewing an NPC, any Secret Notes are visible in a special marked section (e.g., shaded or locked icon). For players viewing their own PC, perhaps a section for their private notes (if they keep any in the system) could be shown, but typically players just edit the main fields.
Edit Controls: Depending on permissions, an Edit button or inline edit fields are available. For a PC, the player (and GM) can edit fields like description or backstory. Perhaps changes by players are tracked or require GM approval for certain fields. NPCs are editable by GM only. Some fields (like “Appearances”) are not manually editable – they’re auto-generated.
Character Chatbot: Optionally, a button “Chat as [Character]” for the GM. This would invoke the AI to simulate the character’s voice for quick Q&A or dialogue drafting. (This uses AI and campaign context but is a UI feature possibly accessible from here for GM convenience to prepare dialogues.)
Character Creation Form: Used when adding a new character outside of the auto-capture process (e.g., creating a PC before any sessions, or adding an NPC in preparation). Fields: Name, Type, assigned Player (if PC), Description, etc. For PCs, this might be part of inviting a player: e.g., when inviting a player, ask for their character name to create a PC entry in one go.
Linking/Tagging UI: In transcripts or notes, if a character’s name is mentioned and not linked, the GM can select it and link to an existing character or create a new one. This manual curation tool ensures the web of references is intact if the AI misses any link.
Character Relationships Editor: Possibly an interface (like a mini-form or visual graph) to manage relationships between characters. The GM can add a relationship by selecting two characters and labeling their connection (for example, on Alice’s page, add relation: [Bob] – “Friend”). This updates both Alice and Bob’s records. This might be a later feature, but it supports the narrative tracking of interpersonal dynamics.
Character Deletion: Allowed only if the character is mistakenly created or no longer needed. Since characters are linked to sessions, deletion might be restricted; often better to mark a character as Removed or simply leave it. But a GM could delete a placeholder NPC that was never actually used. The UI should warn about losing history if deletion is allowed.
Relationships to Other Entities
Campaign – Many-to-One: Each Character is created within a specific Campaign (or World). If using a World with shared NPCs, some Character entries might be linked to the World and not one campaign, or linked to multiple campaigns via appearances. In the general model, assume each character has a “home” campaign (or world) where it’s primarily defined.
User (Player) – One-to-One (for PCs): A Player Character is associated with one User who controls it. A user may have multiple character entries across different campaigns (and possibly more than one in the same campaign in unusual cases), but typically one PC per player per campaign.
Sessions (Appearances) – Many-to-Many: A character appears in many sessions and each session has many characters
thedailydungeonmaster.com
. The Character–Session relationship is crucial for tracking involvement. The appearances relationship may include attributes, e.g., a flag if the character was an active participant vs just mentioned.
Location (Home or Current) – Many-to-One (Optional): A character can have an associated home/base Location. Also, we could track current location, but that tends to be dynamic and not a stored field unless updated manually. Primarily, linking a home location is useful for backstory (e.g., “from Waterdeep”).
Faction (Affiliation) – Many-to-One (Optional): A character may belong to a Faction. Conversely, a Faction has many characters as members (one-to-many from faction’s perspective).
Relationships (Character–Character) – Many-to-Many: Characters can have direct relationships with other characters. This is implemented by either a self-referential relationship table (with fields character1, character2, relation description) or by using one side’s field listing the others. To avoid duplication, a separate CharacterRelationship entity can store pairs and a descriptor (and possibly an inverse relation type). For example, one record could state Character A “Mentor” of Character B, and either create an automatic reciprocal “Mentee” or require a separate entry. For this blueprint, it’s sufficient to note that the relationship is many-to-many and will be surfaced on profiles as described.
Items (Inventory) – Many-to-Many: Characters may possess Items. An item’s current holder is often a character, and historically, many characters might hold an item over time. In data terms, an Item might have a field for current holder, but to track history, an association table logs which character had the item and in which session it transferred.
Story Arcs – Many-to-Many: Characters can be linked to Story Arcs that they are heavily involved in. For example, a character might be the focus of a personal arc (“Revenge for my father” arc involves that character). In the Story Arc entity, we’ll link to characters; from the character side, it’s the set of arcs they’re part of.
World – Many-to-One (Optional): If a Character is a global/world character (not tied to one campaign), it associates with a World. For instance, a pantheon god NPC could be a World character that several campaigns reference. In those cases, the character might not have a single campaign owner, but appears in multiple campaigns. This is advanced usage; generally, most characters are campaign-specific.
Created by (User) – Many-to-One: We can log which user created the character entry (the GM or the player). PCs likely by the player (or GM on their behalf during setup), NPCs by GM. This is useful for edit permissions and tracking contributions. It overlaps with Player field but not exactly (Player is the controller, Creator is who input the data initially).
AI Integration
Backstory Generation: For player characters, the system can assist players in creating a backstory. If a player provides a few prompts (homeland, one defining event, etc.), the AI can draft a backstory narrative. Players can iterate on this, editing or re-generating until it fits their vision. This lowers the barrier for players who want rich backgrounds but struggle to write them.
NPC Auto-Detailing: When the GM creates a new NPC (or when one is auto-created from a transcript mention), the AI can fill out details. For example, if an NPC named Eldric the Wise is created as an “NPC, Sage in Greenwood”, the AI could generate a description: “Eldric is a wizened old sage living in Greenwood. He has a long beard and a patient demeanor, having guided many heroes with his knowledge of ancient lore.” It might also suggest a motivation or secret for the NPC (saved into Secret Notes): “(Secret: Eldric is secretly an agent of the Wood Elves, reporting mortal activities back to them.)” – giving the GM plot ideas.
Personality Tags: The AI can analyze a character’s dialogue across sessions to infer personality traits or tags. For instance, if a character often speaks aggressively and makes bold decisions, the AI might tag them as “brave” or “hot-headed”. These tags (stored in the Tags field) help describe the character and could feed into how the AI portrays them in interactions.
Relationship Inference: By reading the transcripts, AI might detect relationships between characters. For example, if Character A is often protective of Character B in various sessions, the AI could suggest “Protective older brother” as a relationship. Of course, any such suggestions would be reviewed by the GM for accuracy. This feature ensures that the player-GM collaboration on defining relationships is informed by the story’s actual events, not just pre-game planning.
Dynamic NPC Dialogue: The AI can be used in real-time or prep to generate dialogue for NPCs consistent with their profile. If a GM is unsure how an NPC would respond, they can invoke the AI (via a chatbot or prompt) to speak as the NPC. Because the AI has the character’s description, goals, and knowledge of recent events, it can produce contextually appropriate lines. For example, “Eldric the Wise” when asked about a dark artifact might respond with grave concern and scholarly detail. This helps maintain narrative flavor and can inspire the GM’s portrayal.
Character Arc Summaries: For each character, the AI can compile a personal arc summary – what has this character gone through in the campaign? This is especially useful for PCs. It would draw from session data to produce something like: “Arwen began as a naive villager; over the campaign she recovered her father’s sword, learned of her royal lineage, and eventually led the rebellion against the false king.” This can be used by the GM to ensure each PC has a satisfying journey or to brief a returning player who missed sessions.
Suggestions for Character Development: The AI, understanding genre tropes and the current story, might suggest potential developments. For a PC, privately it might prompt the player (if they seek ideas) like “Your character values honor; perhaps they could found a knightly order as the campaign progresses.” For an NPC, it might suggest to the GM “This villain NPC has escaped twice; maybe in a future session, he could turn ally against a greater threat.” These AI suggestions can spark creativity but are optional to use.
Consistency Checking: When a character detail is changed (e.g., a retcon of their backstory or an evolving motivation), the AI can scan past logs to find references that might conflict. For example, if we change an NPC’s allegiance, the AI might flag: “In Session 4, this NPC claimed loyalty to the King, which conflicts with the new note that he hates the King.” This lets the GM either adjust the past statement (maybe he was lying in-game, which is fine) or refine the notes.
Localization/Accent Aid: For flavor, the GM might want a character to have a certain speech style or accent. The AI could provide sample dialogue in that style. E.g., “Write a greeting from this dwarf blacksmith with a Scottish accent.” This is outside pure data model but an AI feature that ties into character portrayal.
Player Support: From the player’s side, the AI can help them remember their own character details or suggest actions. A player could ask, “What does my character know about dragons?” The AI, using the character’s backstory and campaign lore, answers based on that character’s perspective (maybe the character encountered a friendly dragon once, or read about them). This strengthens the player–GM relationship by keeping players informed and engaged with their character’s knowledge without revealing GM-only info. It’s like each player has an assistant to recall lore and even suggest in-character ideas consistent with their persona (with caution to not steer the game unfairly).
Location
Fields (Required & Optional)
Name (Text, Required): The name of the location (e.g., “Emerald City”, “Forgotten Cavern of Ylzar”).
Type (Text/Enum, Optional): The category of location, such as City, Village, Dungeon, Forest, Planar Realm, etc. This helps classify the location and can serve as a tag.
Description (Long Text, Optional): A detailed description of the location’s appearance, atmosphere, notable features, and any pertinent history or lore. Essentially, what a traveler would learn or observe about this place.
Region/Parent Location (Location Reference, Optional): If this location is part of a larger region or has a parent (e.g., a city within a kingdom, or a room inside a dungeon), this field links to that broader location. This allows hierarchical world structure.
In World (World Reference, Optional): If this location is defined at the world level rather than the campaign (for shared reuse), link to the World. If not, it’s implicitly in the campaign’s world.
Map Coordinates (Coordinates or Reference, Optional): If a world map image is used, this can store the X,Y coordinates (or region identifier) for placing this location’s marker on the map.
Notable NPCs (List of Character References, Optional): Key characters associated with this location. For example, the governor of the city, or the monster that inhabits the cave. (This could be derived from character info as well, but a manual list highlights important local figures.)
Controlling Faction (Faction Reference, Optional): If a faction governs or claims this location, reference that faction (e.g., Kingdom of Avalon for a city, or Red Hand Orcs for a territory).
Secrets (Long Text, Optional, GM-Only): Hidden lore about the location (for GM eyes). E.g., “Secret tunnel under the altar leads to a vault.” or “Town mayor is part of a cult.”
History (Long Text, Optional): Background history of the location – founding, past events, etc. This is lore that might be known to characters with sufficient knowledge. It could be shown to players as part of description if they “research” the place.
Image (Image/File, Optional): An illustrative image or map snippet for the location (e.g., a picture of the city skyline, or a floor plan of a dungeon level).
Appearances (List of Session References, Auto): Sessions in which this location was visited or mentioned
thedailydungeonmaster.com
. This is auto-populated by scanning session transcripts for the location name. It provides a quick timeline of interaction with this place.
Tags (List of Text, Auto/Optional): Keywords associated with the location. These might include the type (redundant if Type field is separate), environment (“mountainous, coastal”), or story tags (“haunted, prosperous”), possibly derived from the description or narrative usage.
UI Components and Interactions
Location List/Map: A section in the campaign (and/or world) where all Locations are listed, possibly grouped by region or sorted by name. If a map is provided, an interactive map view allows clicking on markers to select a location. Otherwise, a list view shows each location with maybe its type and a one-liner description or region. A filter by type could be available (show only Cities, only Dungeons, etc.).
Location Detail Page: Display of a specific location’s info:
Header: Location Name, possibly followed by Type (e.g., Emerald City (Metropolis)). If it has a parent region, that could be indicated like “Kingdom of Avalon > Emerald City” as a breadcrumb.
Description: The main descriptive text, giving an overview of the location’s look and feel. For players, this is what their characters would generally know or see when there.
Details Panel: A sidebar or section listing key facts – Type, Region, Controlling Faction, Notable NPCs (each NPC name clickable to go to that character), and possibly population or size if relevant (if such data was provided in description, might not have a separate field).
History: If provided, a collapsible section detailing the location’s lore/history.
Image/Map: If an image is attached, it’s displayed (with zoom options if it’s a map). For a dungeon or building, this might be a map. For a city/landscape, an illustration or map.
Connections: List of related entities:
Characters: Possibly an embedded list of characters currently at or from this location. E.g., “Residents: Alice, Eldric (NPC)”. This can be derived from characters that have this as home or those that were last seen here, though “last seen” tracking is complex. Alternatively, just notable NPCs manually listed by the GM.
Factions: If any factions operate here (controlling or otherwise notable presence), list them. For example, “The Thieves’ Guild has a hideout in this city.” (with a link).
Items: If an item is stored or found here, could list notable items (though typically items link to a location when hidden/stored).
Sessions: A list or timeline of sessions involving this location (from Appearances). It could say “Visited in Session 3, Session 5; Mentioned in Session 7” with links to those sessions. This contextualizes the location’s role in the story.
GM-Only Info: If Secrets are recorded for this location, the GM sees a highlighted hidden section. Players do not see this. The GM UI might allow toggling certain secret details to reveal to players after they discover them (like moving info from Secret to Description or History as the campaign progresses).
Edit and Map Placement: The GM can edit the location fields. If a map is present, there might be a small map editor to drag the marker for that location to the correct spot on the world map (setting the Coordinates field). The GM can also add sub-locations (a button like “Add Sub-location” which creates a new location with this one pre-selected as parent).
Location Creation Form: Allows input of name, type, region, etc. If triggered from a map click, coordinates might be pre-filled. If triggered from a parent location page (“Add sub-location”), the parent is set.
Map Interface: If a world map is used, the UI might present a full map view where locations are pins. Hovering or clicking a pin shows the location name and perhaps a thumbnail of description, double-click to go to detail page. GMs might have a mode to add new pins/locations directly on the map.
Path/Distance Tool (if needed): Possibly an interactive tool for travel (mostly out of scope, but the map might allow measuring distances or marking routes, which is more of a feature than core data).
Filtering & Search: Searching for a location by name or tag from the campaign search will bring up these entries. The UI could also have quick filters like “Show all Dungeons”, “Show all towns in Kingdom X” etc., using the Type and Region fields.
Delete Location: GMs can remove a location if it was added in error or never used. If a location has appearances or links, deletion is discouraged or forbidden without cleaning those references (to maintain integrity). Usually, you’d just keep it or mark it somehow rather than delete, but the option could exist.
Relationships to Other Entities
Campaign/World – Many-to-One: The location is defined within a Campaign or at the World level. If a World reference is present, it’s a global location for that world (accessible to any campaign in that world). If not, it’s local to the campaign.
Locations (parent-child) – One-to-Many (Optional): Locations can contain other locations. For example, a Kingdom contains many Cities, a City contains many Districts or Landmarks. This hierarchical relationship is recursive. In data terms, a location may have a Parent Location reference (as above). Queries can gather the full hierarchy.
Characters (residents/origins) – Many-to-Many: There isn’t a strict single relationship, but characters often link to a home location or current location. From the location’s perspective, many characters can be associated. This can be inferred from characters’ Home Location field (one-to-many: one location, many characters from it). Also, if tracking current whereabouts, many characters could currently be at one location (this would be dynamic and not stored persistently unless updated).
Factions – Many-to-Many: A faction can operate in multiple locations, and a location can host multiple factions. However, we do have a field for controlling faction (one primary faction). For multiple factions, either they are listed in description or we model a separate relation table (FactionPresence with faction, location, and maybe influence level). For simplicity, controlling faction is one-to-many (one faction controls many locations). Other faction presence can be secondary.
Items – Many-to-Many: Items can be located at places (e.g., an artifact hidden in a dungeon). If an item’s current holder is null and location is set, that means the item lies at that location. One location can house many items (like a vault). Historically, an item can move between locations (via sessions). The relationship of item to location can thus be current location (one-to-many from location perspective) and a history via sessions.
Sessions (appearances) – Many-to-Many: Locations are linked to sessions in which they appear. Every time the party visits or the location is meaningfully mentioned, that session is associated. This relationship is auto-maintained and used to generate the appearance list
thedailydungeonmaster.com
.
Story Arcs – Many-to-Many: If certain story arcs revolve around specific places (say an arc about “Defend Castle Black” clearly involves Castle Black location), we can link that arc to the location. In practice, this might be derived from the fact that many sessions in that arc feature that location. But we might allow an explicit link for clarity (one arc can involve multiple key locations; one location can be central to multiple arcs).
User (Creator/Editor) – Many-to-One: The user who created the location entry (usually the GM, or possibly a player if worldbuilding is collaborative).
AI Integration
Procedural Description: When a new location is created with minimal info, AI can generate a vivid Description. If the GM provides just a name and type (e.g., “Silverfall Mountains, mountain range”), the AI could produce: “The Silverfall Mountains are a towering range whose peaks glitter with mica and silver veins. Snow caps the highest summits even in summer. These mountains are known for their treacherous passes and the ancient dwarf fortresses hidden within.” The AI uses context (world theme, nearby locations, controlling faction) if available to keep the description consistent with the setting.
Historical Lore: For the History field, the GM can ask AI to invent some backstory. For instance, “Give me a 300-year history of this city involving wars and a dynasty change.” The AI can create a plausible timeline of events, which the GM can then tweak. This is valuable for fleshing out the world without doing it all manually.
Auto-Tagging: Based on the description and history, the AI can suggest or auto-assign Tags like “mountain, dwarf-made, dangerous, mining” for the Silverfall Mountains. These help search and also inform the AI for future content generation.
Encounter Suggestions: Given a location’s type and known traits, the AI can suggest fitting encounters or events. For example, for a “Haunted Forest” location, it might suggest “common encounters: ghostly apparitions, enchanted flora, lost travelers”. While not stored as fields, this could be shown to the GM as they create the location to prompt ideas for what could happen there. It integrates into the prep process – the location entry could have an AI-generated list of possible dangers or points of interest which the GM might incorporate into the campaign.
Dynamic Descriptions: During gameplay, if players visit a location under certain conditions (night vs day, war time vs peace), the AI could help generate on-the-fly descriptions reflecting those conditions. For instance, the base Description is static, but the AI can be asked “Describe Emerald City at night during the rain” to get a scene-setting narrative. This isn’t stored in the model, but it’s an AI feature triggered by context and the base data.
NPC Integration: AI uses the Notable NPCs and Faction info to contextualize its answers or descriptions. If a player asks, “Who is in charge here?”, the AI will look at Controlling Faction and Notable NPCs to answer “Emerald City is governed by Duke Ferdinand, who represents the Kingdom of Avalon’s interests.” Essentially, it becomes a lore oracle using the structured data.
Map Generation: In some cases, AI might assist in creating a rough map for a location, especially dungeons or buildings (e.g., using procedural generation descriptions to suggest room layouts). If integrated with image generation or specialized tools, the GM could get a starting blueprint for a dungeon after providing a few parameters. This is a complex integration, but worth noting as a possible AI enhancement tied to the location’s fields (size, type, purpose).
Multi-location Consistency: The AI cross-references location data for consistency. If one location’s description says “tributary of the Red River”, the AI knows to mention that in Red River’s entry if appropriate (or suggest an update). It helps maintain a coherent world. Similarly, if two cities are trading partners per lore, the AI can make sure both mention that connection.
Narrative Use: When the story arcs or sessions involve a location, the AI can highlight location-based narrative elements. For example, “This is the third time the party has visited the Emerald City, tensions in the city have grown each time.” It might suggest evolving the description or atmosphere based on story events (like increasing guard presence after a riot in a previous session). This is dynamic narrative feedback using location as a stage.
Faction
Fields (Required & Optional)
Name (Text, Required): The name of the faction or organization (e.g., “The Thieves’ Guild of Blackport”, “Order of the Silver Flame”).
Type (Text/Enum, Optional): The kind of faction – e.g., Guild, Kingdom, Clan, Religious Order, Company, Tribe. This categorization aids understanding and filtering.
Description (Long Text, Optional): A general overview of the faction: their mission, culture, and significance in the world. It should answer “Who are they and what do they do?” in narrative terms.
Leadership (Character Reference(s), Optional): The key leader or leaders of the faction. This could reference one Character (e.g., a guild master) or multiple (a council). If multiple, it might be a list of character references or a note like "Council of Elders" with individual names in description.
Members (List of Character References, Optional): Notable members in the faction (aside from the leader). This is usually a subset of characters associated with the faction – one does not list every member, just key ones like known NPCs or PCs in it.
Allies (List of Faction References, Optional): Other factions that are allied or have friendly relations with this faction.
Rivals/Enemies (List of Faction References, Optional): Factions that are in conflict or competition with this faction.
Headquarters (Location Reference, Optional): The primary base of operations or home location of the faction. For a kingdom, this might be its capital city; for a guild, a guildhall location.
Scope (Text, Optional): The scale of the faction’s influence – e.g., local (within one city), regional, global. This gives context whether they’re a small group or a major power.
Resources/Strength (Text/Numeric, Optional): A description or rating of the faction’s resources or military strength (like “200 members, wealthy” or a simple scale like 5/5 strength). This can be narrative (not mechanical unless needed for certain games).
Goals/Agenda (Long Text, Optional): The current goals or agenda of the faction. What are they trying to achieve in the campaign’s narrative? E.g., “Undermine the Queen’s authority to establish a thieves’ oligarchy.”
Secrets (Long Text, Optional, GM-Only): Hidden information about the faction (e.g., “Secretly led by a dragon in disguise”, or “Plan to betray their allies after the war”). This is for GM reference.
Insignia/Symbol (Image/File or Text, Optional): The emblem or symbol of the faction (could be an image file or a textual description like “a red hand on a black field”).
Appearances (List of Session References, Auto): Sessions where this faction was mentioned or played a role. Automatically compiled from transcripts (mention of faction name, or its members’ actions)
thedailydungeonmaster.com
.
Tags (List of Text, Auto/Optional): Keywords for the faction, possibly derived from description (e.g., “criminal, stealth, mercantile, rebellion”). Type might also appear as a tag.
UI Components and Interactions
Faction List: A section listing all factions known in the campaign (and world, if applicable). Could be sorted by type or influence. Each entry shows Name and perhaps a brief tagline (maybe the goal or description summary). Icons could represent faction type (a crown for kingdoms, a flag for armies, etc.). Filtering by type or scope might be available.
Faction Detail Page: Contains comprehensive info:
Header: Faction Name, with maybe a small emblem icon if provided. Possibly display the Type (like Order, Guild) and Scope (like Regional).
Description: The narrative description of the faction, giving background and flavor.
Leadership & Members: A section that explicitly lists the leader(s) and notable members. Leader could be highlighted (e.g., “Leader: Duke Ferdinand (Character link)”). Members list might show each character name with a short role if provided (e.g., “Sir Gallant (Knight Commander)”).
Allies & Enemies: Show lists of allied factions and rival factions. Each name is a link to that faction’s page. Could use icons or color coding (green for allies, red for enemies) for quick visual cues.
Headquarters: If a HQ location is set, show “Base: [Location Name]” (linked to location). If none, could show scope or main area of operation instead.
Goals/Agenda: A section outlining what the faction is currently trying to achieve. This is particularly relevant for dynamic campaign storytelling – players might learn these over time. If players have not yet discovered a faction’s true goals, the GM might keep part of this in the Secret section.
Resources: If provided, display a summary of faction strength/resources. E.g., “Approximately 50 skilled thieves across Blackport; very wealthy, owns several fronts like the Silk Road Tavern.”
Interactions/Appearances: A timeline or list of sessions where the faction was involved. It might say things like “Session 2: First encountered by players (thief ambush). Session 8: Negotiated alliance with the party.” These notes could be manually added by GM or auto-generated summary snippets based on session content.
Allies/Enemies Narrative: Optionally, a narrative paragraph could summarize the faction’s relationships: e.g., “The Thieves’ Guild maintains a secret truce with the Assassin’s Brotherhood (ally), but is hunted by the City Watch and openly opposes the Merchants’ Guild (enemies).” This could be constructed from the Allies/Enemies fields for better storytelling.
Edit Controls: Only GMs (or authorized players if worldbuilding collaboratively) can edit faction info. The UI would allow editing description, allies, etc. Possibly adding a new faction through this page as well.
Faction Creation Form: For GMs to add a new faction, capturing the fields above. The AI might help here by providing template or random faction ideas (if a GM just knows they need a group but not the details).
Linking Faction to Characters: On a Character’s edit page, selecting a faction for that character (and maybe role/title in faction). Conversely, on the Faction page, adding a member might involve picking a character and giving a role. This two-way linkage should remain consistent (if done via one side, the other updates).
Delete Faction: If a faction was added incorrectly or merged with another, GMs might delete it. If it’s referenced in sessions or by characters, deletion should be warned or require cleanup (perhaps better to just not use it further, but technically possible).
Faction Relations Visualization (optional): A graph or chart showing relationships between factions could be useful if the world is complex (nodes for factions, lines for alliances or enmity). Not required, but a nice UI touch that could be generated from the data.
Relationships to Other Entities
Campaign/World – Many-to-One: Factions are defined within a campaign or globally in a world. If the campaign is linked to a world, it might use factions from that world or introduce new ones. Each faction entry notes its origin context.
Characters (Leaders/Members) – Many-to-Many: Characters can belong to factions. A faction has many characters as members, and a character can be part of multiple factions (though often one primary). This is a many-to-many via either listing on both sides or a join entity FactionMembership (character, faction, role/title). The Leadership field is essentially a specific case of membership (which could be indicated by a role attribute like “Leader”).
Locations (Headquarters) – Many-to-One: A faction may have a base location. One location can host multiple factions (e.g., a city can have several factions headquartered there), so from location to faction it’s one-to-many. The HQ field on faction is the one side of that.
Factions (Allies/Enemies) – Many-to-Many: Factions have relationships with other factions. This is inherently many-to-many. If needed, a separate relationship object FactionRelation (faction A, faction B, relation type) can store whether they’re allied, enemy, neutral, etc. But the fields Allies and Enemies effectively capture this. (Allies/Enemies can be stored as two lists, but that might double-enter data unless you ensure if A lists B as ally, B lists A as ally. A relational table would handle symmetry or asymmetry explicitly. For blueprint simplicity, assume manual consistency or a behind-scenes enforcement of reciprocal relations).
Story Arcs – Many-to-Many: Factions often drive story arcs. An arc about a war or a political intrigue will involve certain factions. So linking arcs to factions is useful (one arc can involve multiple factions, one faction can be part of multiple arcs). E.g., “Civil War Arc” involves the Rebels faction and the Empire faction.
Sessions – Many-to-Many: Sessions where faction members acted or where the faction’s name was mentioned are linked. If the players have a meeting with a faction leader in a session, that session is associated with the faction. This is part of Appearances auto-tracking.
Items – Many-to-Many (Occasional): Not common, but if an item is owned by a faction (treasury or artifact held by an organization rather than an individual), an item could be related to a faction. Usually it’s via a character (the faction’s leader holds it), but one could model an item’s custodian as either a character or faction. We can note that possibility without a dedicated structure: e.g., have an item’s holder field accept either a character or faction reference (polymorphic). That adds complexity, so typically we stick to characters as holders.
User (Creator) – Many-to-One: The user (GM) who created the faction entry. This is for tracking edits and is analogous to created_by on other lore entries.
AI Integration
Faction Concept Generation: If a GM needs a faction on the fly, AI can generate one given some cues. For example, “a religious cult that opposes the king” could yield a fleshed-out faction concept: name suggestions (e.g., “The Veil of Truth”), description (“a secretive cult dedicated to the old god of justice, infiltrating the king’s court…”), and goals (e.g., “Expose the king’s corruption and install a theocracy”). This speeds up prep for unplanned factions.
Goal and Agenda Updates: AI can help maintain a faction’s agenda in reaction to campaign events. If, say, the players thwart one of the faction’s plans in a session, the AI might suggest updating the faction’s goals: “The Red Hand’s plot to summon the demon was foiled; they now pivot to Plan B, perhaps seeking an artifact to try again.” It keeps the faction dynamic and responsive.
Relationship Reasoning: Given the world context, AI can rationalize why factions are allied or enemies. It might automatically annotate Allies/Enemies with reasons in the description. E.g., “Allies: Merchants’ Guild (they profit mutually from trade protection deals). Enemies: Thieves’ Guild (the guild’s thefts undermine their commerce).” This provides narrative depth without the GM having to think of every detail.
Diplomacy Simulator: For complex campaigns, the GM might query the AI on how factions would behave. For instance, “What will Faction A do if the players support Faction B (their enemy)?” The AI, understanding the goals and resources, could answer: “Faction A might attempt to sabotage the alliance or offer the players incentives to switch sides.” This assists the GM in plotting logical faction responses and multi-faction politics.
Auto-Appearance Tagging: When scanning sessions, beyond just tagging a mention, the AI can interpret the context of the faction’s appearance. For example, if in Session 5 the players broker a deal with the Thieves’ Guild, the AI could add a note to that session’s appearance: “Thieves’ Guild – made a treaty with party”. These notes could populate the faction’s timeline or the arc. It’s like AI-generated annotation for the faction’s log of activities.
Propaganda and Communication: If the faction issues decrees or rumors, the AI can generate those outputs. E.g., “Write a threatening message from the Rebel faction to the King” or “What propaganda would the cult spread among villagers?”. The AI’s ability to echo the faction’s voice (given its described ethos and goals) helps the GM produce in-game handouts or dialog consistent with that faction.
Resource Impact: If using numerical or descriptive resources, the AI can help calculate or narrate changes. For example, if a faction loses many members in a battle (per session events), the GM could note that and the AI might update the faction’s strength description or suggest “diminished morale after the loss at Blackfort.” This ties the mechanical outcomes (like battle results) back into the narrative descriptions automatically.
Alignment with Narrative Themes: Some factions embody themes (order vs chaos, etc.). The AI can ensure that their actions and portrayal in AI-generated text stay aligned with those themes. For instance, a holy order faction’s outputs will consistently be righteous or dogmatic in tone, as appropriate.
Assistant for Players: If players interact heavily with a faction (say they are members or collaborate closely), they could query the AI for faction knowledge: “Does the Order of the Silver Flame have any known weaknesses or codes of conduct we should remember?” The AI can summarize known info from the description and history (e.g., “They value honesty; lying to them could get you expelled.”). This empowers players to engage deeply with faction mechanics/narrative without out-of-game note hunting, reinforcing the player–GM partnership in storytelling (players get info through AI that the GM would have told them if asked).
Item
Fields (Required & Optional)
Name (Text, Required): The name of the item (e.g., “Sword of Ages”, “Ancient Spellbook of Zorath”).
Type (Text/Enum, Optional): Category of item – e.g., Weapon, Armor, Potion, Artifact, Document, Currency, Miscellaneous. This categorization aids filtering and hints at usage.
Description (Long Text, Optional): A detailed description of the item’s appearance and known properties. If it’s a mundane item, description might be brief; if it’s legendary, this could include lore, inscriptions, etc.
Magical Properties (Text, Optional): If applicable, a description of any magical or special powers the item has. (For non-magical items, this can be omitted or say “None”.)
Owner/Holder (Character Reference, Optional): The current character who possesses the item. If the item is not currently held by a character, this could be empty.
Location (Location Reference, Optional): The current location of the item if it’s not with a character (e.g., stored in a vault, hidden in a cave). Only one of Owner or Location would typically be set at a time – if both are empty, the item’s whereabouts might be unknown or lost.
History/Background (Long Text, Optional): The known history of the item – its origin, previous owners, notable events it was involved in. For example, “Forged by dwarves in the Second Age, passed down through the Ironhelm lineage until stolen by brigands…”.
Value (Text or Numeric, Optional): Its monetary value or a qualitative value (e.g., “Priceless”, “Worth ~100 gp”). Depending on campaign needs, this could be a number or just narrative.
Condition/Status (Text, Optional): The item’s condition or status – e.g., “Pristine”, “Damaged”, “Cursed (dormant)”, “Destroyed”. This helps track if the item gets broken or used up.
Associated Faction (Faction Reference, Optional): If the item is strongly tied to a faction or group (e.g., a crown of a kingdom, or a guild’s secret ledger), reference that faction. This is more for lore grouping than mechanics.
Image (Image/File, Optional): A picture of the item or an illustration (like a drawing of a sword).
Appearances (List of Session References, Auto): Sessions in which the item appeared or was used/mentioned. Automatically gathered via transcripts (the mention of the item’s name in dialog or notes)
thedailydungeonmaster.com
.
Tags (List of Text, Auto/Optional): Keywords for the item, possibly including its type or notable attributes (e.g., “sword, fire-based, legendary”). Could be auto-generated from description or manually added.
UI Components and Interactions
Item List/Inventory: A list of all important items tracked in the campaign. This might be presented as part of the lore index or a separate “Items” section. Each entry shows the Item Name, maybe an icon indicating type (sword icon for weapons, potion bottle for potions, etc.), and possibly who currently holds it (e.g., “with Alice” or “in Dragon’s Lair”). Sorting or filtering by type is useful (show only weapons, etc.).
Item Detail Page: Shows full details of the item:
Header: Item Name with an icon or thumbnail image if available. Possibly include Type (like Artifact, Weapon) next to the name.
Description: The main descriptive text about the item.
Properties/Stats: If the item has magical properties or mechanics, list them in a bullet list or small section. E.g., “+1 to attack rolls. Emits light in a 20ft radius. Cursed: induces nightmares.” This section translates the Magical Properties field into a readable format. If there are game stats (like damage 1d8), those could appear here too as needed.
Current Holder: If Owner/Holder is set, display “Currently held by: [Character Name]” (with link). If Location is set instead, display “Stored at: [Location Name]”. If neither, maybe “Current status: missing/unknown”.
History: A section detailing the item’s lore and history. This might be partly narrative and could include bullet points of timeline (if the GM or AI has broken history into events). For example: “- Forged by King Arlon’s smiths in 302 A.D.\n- Lost in the Battle of Blackfire (310 A.D.)\n- Reappeared in the hands of the thief Garron (312 A.D.)”. This can be taken from the History field and formatted nicely.
Appearances/Session Log: List of sessions and what happened to the item in each. Possibly annotated with context: “Session 5: Discovered in the ancient temple”, “Session 6: Given to Alice for safekeeping”. This gives a quick storyline of the item through the campaign, derived from session notes or manual GM annotations.
Related Lore: Possibly show related entities: if the item is associated with a Faction or certain Characters (previous owners), list them. E.g., “Associated with: Order of the Silver Flame (as a holy relic)”. Characters who owned it might be listed in History, but could also be pulled out as links (previous owners).
Image: Show the item’s image if one is uploaded (like a small depiction or a photo of a handout).
Edit Controls: GMs can edit all fields. Perhaps players can edit an item if it’s their personal item and GM allows (less likely; items mostly GM-managed).
Item Creation Form: For adding a new item, either as part of worldbuilding or during play (e.g., the GM adds a treasure found). Fields for name, type, etc., with possibly some templates (like a quick-add for a generic potion or common gear vs a detailed form for unique items).
Quick Ownership Transfer UI: On a character’s page, the GM might have an interface to move an item to that character (or away). For example, if a character picks up an item in a session, the GM can go to that item page and set Owner to the character (or possibly do it from the character’s inventory list by selecting an item).
Indicators of New Items: If an item is first introduced via transcript (like mentioned but not yet in the system), the AI might create it. The UI should highlight new auto-created items so the GM can fill in details. For example, “New Item: Golden Key – click to edit details.” This ensures stub entries become complete.
Delete/Remove Item: If an item is destroyed or removed from the campaign, the GM might mark it as such via the Status field (e.g., set Status to “Destroyed”) rather than deleting to keep history. Actual deletion would be for erroneous entries. If deletion happens, references in sessions remain textual but the link is gone, which is probably fine (or they’d remove mention if it truly shouldn’t exist).
Item Search: Through the search bar, items should be searchable by name or tag. If a player forgets who has an item, they could search the item’s name and find its entry, which tells them the current holder.
Relationships to Other Entities
Campaign/World – Many-to-One: Items belong to either a campaign or a world (global item). Typically campaign-specific, but some legendary items could exist in the world’s lore and appear across campaigns.
Character (Holder/Owners) – Many-to-One (current), Many-to-Many (historical): The Owner field links an item to a character currently. Over time, many characters might have held the item. If we wanted to track ownership history structurally, we’d have a join entity ItemOwnership (item, character, start session, end session or something). But without that complexity, we capture current owner directly, and use session appearances or history text to imply past owners. A character can hold many items at once (one-to-many from character to items).
Location (Storage) – Many-to-One (current): Similar to owner. If not with a character, an item can be at a location. One location can contain many items (like a treasury).
Faction (Association) – Many-to-One: If the item is tied to a faction (like a national treasure or an guild’s tool), link to faction. One faction could have multiple items associated (one-to-many).
Sessions (appearances) – Many-to-Many: Items appear in sessions. This logs events like discovery, transfers, usage. Each link could be annotated (AI/GM note: used or found etc., though not separate fields, just context).
Characters (Mentioned in Lore) – Many-to-Many: Indirectly, many characters might be referenced in an item’s history as owners or creators. We don’t necessarily model that beyond text and maybe linking names in history to character entries. If needed, a relationship of past owner can be drawn, but often it’s narrative.
Story Arcs – Many-to-Many: Items can be central to story arcs (e.g., “Quest to find the Holy Grail” – the Holy Grail item is tied to that arc). So an arc may link to the item and vice versa. Many items can be in an arc (collect 5 artifacts), and an item might be part of multiple arcs (if it has a long history, but usually one main arc).
User (Creator) – Many-to-One: User who created the item entry (almost always GM, except maybe if players can suggest items for their inventory, but usually GM).
AI Integration
Item Lore Generation: When a new item is introduced, AI can generate flavor text or lore. For example, if the GM adds “Orb of Night (Artifact)” and notes it’s magical, the AI could output: “An obsidian orb that absorbs light around it. Legends say it was crafted by an ancient sorcerer to imprison the essence of a fallen star. In the hands of the living, it whispers promises of eternal night.” This gives immediate depth which the GM can refine or trim.
Property Inference: If the item is mentioned in transcripts (players may speculate or identify properties), the AI might update or suggest Magical Properties. E.g., if the transcript says “This sword burst into flames when orcs were near.”, the AI might prompt the GM: “Does the Sword of Ages have an ability to glow or ignite near orcs? If so, add to properties.” This helps keep item data in sync with narrative discoveries.
Tracking Ownership Changes: The AI notices when an item changes hands in a session. For instance, transcript: “Alice gives the Amulet to Bob.” It can flag that the Amulet’s owner should be updated to Bob’s character. It could even auto-update the Owner field and log an event in the item’s history like “Session 10: Alice gave the Amulet to Bob.” (Probably requiring GM confirmation to avoid mistakes.)
Value and Identification: If players appraise an item or an identify spell is cast (often in RPGs), the AI can provide the outcome: telling its value, properties, etc. The system could have a feature where the GM presses a button “Identify with AI” and, using the lore plus some creativity, the AI reveals the magical properties or backstory to present to players (assuming the GM wants that and it’s time in the story to reveal). This speeds up what is usually a manual, game-rule-informed process by providing a narrative answer in seconds.
Lost Item Reminder: If an important item hasn’t appeared in a while (no session mentions for many sessions), the AI might remind the GM in campaign planning: “The Crystal of Light hasn’t been seen since Session 5 when it fell into the chasm. If it’s important, consider an event to recover or reveal it.” This ensures narrative Chekhov’s guns are not forgotten.
Item Usage Effects: Should a player use an item, the AI can narratively elaborate its effect. For example, if a Potion of Firebreathing is used, the AI can help the GM describe the outcome in colorful detail even if the mechanical effect is known. This is more of a live-aid: GM inputs “potion used, effect should be fiery breath attack” and AI returns a vivid description to use.
Consistency & Continuity: AI helps maintain that the item’s described properties and history remain consistent across all references. If an inconsistency arises (say an earlier session said the sword was made of silver, but the GM accidentally describes it as steel later), the AI can flag this to the GM: “Item description vs Session 2 detail mismatch”. The GM can then reconcile (maybe the blade has a silver coating—adjust the entry).
Crafting and Upgrades: If players decide to modify an item (enchant a sword, repair a broken shield), AI can suggest possible outcomes or methods, integrating game logic with narrative. E.g., “To restore the Sword of Ages, it must be quenched in dragon’s blood at the forge of Kaldran.” – The AI provides a story-driven requirement that the GM can use as a mini-quest. This ties item development into narrative arcs seamlessly.
Player Queries: A player might ask the AI (via chatbot), “What do we know about the Sword of Ages so far?” The AI can summarize discovered info: “It’s a legendary sword that glows near orcs and was used by King Arlon in the ancient war. Alice currently wields it.” This ensures players have access to item lore their characters would know, strengthening engagement without breaking the flow to ask the GM.
Automatic Tagging: Based on the item description, the AI can tag the item with relevant keywords (for search). E.g., if description mentions “flame”, “dragon”, “cursed”, those could become tags. Also, if the item is part of a set or related to another, it might tag with that (though relationships are better explicit; tags could be “DragonRelic” linking multiple items thematically).
Story Arc
Fields (Required & Optional)
Title (Text, Required): The name of the story arc or quest (e.g., “The Dragon’s Uprising”, “Mystery of the Lost Heir”, “Alice’s Redemption”). This should be a short, evocative descriptor of the narrative thread.
Type/Category (Text/Enum, Optional): Classification of the arc, such as Main Plot, Side Quest, Character Arc, Background Plot. This indicates the arc’s significance or nature.
Description (Long Text, Optional): A summary of the arc’s narrative. This describes the premise and scope of the storyline, including the conflict or goal. For example: “A rebellion is brewing in the north, incited by a dragon assuming human form. The party must uncover allies and stop the uprising before the kingdom falls.”
Status (Enum, Optional): The current status of the arc – e.g., Ongoing, Completed, Failed, Paused. This helps in tracking which arcs are active and which have concluded in the story.
Start Session (Session Reference, Optional): The session where this arc began or was introduced. (If the arc started off-screen or at campaign start, this can be null or point to session 1.)
End Session (Session Reference, Optional): The session where the arc was resolved or concluded. Empty if still ongoing.
Related Sessions (List of Session References, Auto/Optional): All sessions that significantly contributed to this arc. This can be built by tagging sessions to arcs (either manually by GM or via AI suggestion). It effectively outlines which sessions cover the arc’s development.
Characters Involved (List of Character References, Optional): Key characters involved in the arc. This can include PCs and major NPCs who are central to the arc. For a character-driven arc, that character would be listed here. For a plot arc, all party members plus main antagonists might be listed.
Factions Involved (List of Faction References, Optional): Factions that play a major role in this arc (e.g., the Rebellion, the King’s Guard in a war arc).
Locations Involved (List of Location References, Optional): Important locations for the arc (e.g., the region where events occur, a dungeon that must be explored, a city under siege).
Items Involved (List of Item References, Optional): Any significant items or artifacts tied to this arc (e.g., a quest to retrieve a holy sword would list that sword).
Clues/Mysteries (List of Text, Optional): For investigative or mystery arcs, a bullet list of clues discovered and questions raised. Each clue could be a short text, potentially with a reference to where it was found. (This might not directly map to an entity but is a structured field to help GM track puzzle pieces in the arc.)
Resolution (Long Text, Optional): A summary of how the arc was resolved (filled in when Status becomes Completed/Failed). This serves as a retrospective conclusion to the storyline.
Narrative Importance (Numeric or Text, Optional): A priority or importance indicator (e.g., 1-5 or primary/secondary) to help focus. This might guide AI on how much to emphasize this arc in summaries or future suggestions.
Next Steps (Planning) (Long Text, Optional, GM-Only): For ongoing arcs, notes on planned or potential next events. The GM can jot down ideas or the AI can suggest them. This is essentially a prep aid field.
UI Components and Interactions
Story Arcs Overview: A section on the campaign dashboard or a dedicated “Story Arcs” page that lists all arcs. Each entry shows the Title, Status, and maybe a one-line description or status note (like “Ongoing – last progressed in Session 10”). Possibly group by status (active vs completed arcs). It should be easy to scan which threads are unresolved.
Story Arc Detail Page: A page that delves into the specific arc:
Header: Arc Title with a tag or badge for its Type (e.g., Side Quest) and a status label (color-coded for ongoing/completed). Could also show something like “Sessions: 5 – 8” if start/end are defined.
Summary/Description: The main description of the arc’s story. If the arc is ongoing, this describes the premise; if completed, it might be updated to incorporate the outcome.
Key Elements: A series of sub-sections or info boxes:
Characters: List of involved characters (with short notes like “Protagonist”, “Antagonist”, “Victim” if applicable). Their names link to profiles.
Factions: List of factions involved (e.g., “Rebels (leading uprising)”, “King’s Guard (defenders)”).
Locations: List of crucial locations (e.g., “Northern Pass (battle site)”, “Dragon’s Cave (final confrontation)”).
Items: List of key items (e.g., “Dragonstone Amulet (needed to control the dragon)”).
These sections allow quick reference to all relevant lore tied to the arc.
Progress Timeline: A chronological list of milestones in the arc, usually tied to sessions:
Each entry could be like “Session 5: Arc introduced – villagers talk of a rebellion.”, “Session 7: Party discovers the rebel leader is a dragon in disguise.”, “Session 10: Arc concluded – dragon defeated and uprising quelled.”. These come from the Related Sessions, annotated with what happened in context of the arc. GMs might write these notes, or the AI can auto-generate them from session summaries.
If the arc is ongoing, the timeline ends with the last known event and maybe a “…to be continued” indicator.
Clues/Mysteries: If the arc involves puzzles or investigation (like a murder mystery arc), list the clues uncovered. Possibly a checklist: “✓ Old key found in library (Session 2)”, “✓ Note mentioning 'blue rose' (Session 4)”, “? Identity of murderer unknown”. This helps the GM and players keep track of unsolved pieces. This section can be updated as clues are found or mysteries solved (the AI or GM can check them off).
Next Steps (GM-only): A section visible only to the GM (and co-GM) for planning. It might list upcoming scenes or ideas: “The dragon will make an ultimatum via a messenger in next session,” or “If players seek alliance, the Duke might reveal his secret.” This is drawn from the Next Steps field.
Resolution: If the arc is completed, a final paragraph or box stating how it ended (from the Resolution field). This provides closure in the documentation.
Edit Controls: GMs can edit arc details. Possibly they can drag & drop to add sessions to the Related Sessions list (or on a session page, mark it as part of an arc). They can add or remove characters, etc., via multi-select lists or an “Add character to arc” button.
Arc Creation: This might happen in two ways – proactively by GM during campaign planning (“Add a new story arc” form) or reactively when AI suggests an arc. The form would include Title, Type, maybe initial description and involved entities. It can be lightweight initially (just a title and type) and fleshed out later.
Marking Sessions to Arcs: On a Session detail page, there could be a UI element to tag which arcs this session advanced. For example, a dropdown or checklist of active arcs to tick. The AI might pre-tick suggestions. This updates the arc’s Related Sessions and timeline accordingly.
Visual Timeline (optional advanced UI): A visual representation of arcs across the campaign timeline – e.g., a chart with sessions on one axis and arcs as colored bars showing which sessions they span. This can help the GM see overlapping arcs. Not required, but an interesting visualization if the data is there.
Notifications of Arc Progress: If the campaign dashboard shows arcs, it might highlight recent progress. e.g., “Mystery of the Lost Heir – new clue in Session 14.” This keeps arcs in focus.
Player View: Players likely can view arc pages for arcs their characters would know about (most arcs the party is involved in). But perhaps GMs might hide some arcs if metagame (like a secret arc not revealed yet). We might have a field or flag to mark an arc as Visible to Players or not. If not visible, it’s GM-only until a reveal. The UI would then filter which arcs players can see (maybe only main quests and things they are aware of).
Relationships to Other Entities
Campaign – Many-to-One: Every story arc belongs to a specific campaign. (If some arcs are global across campaigns, those would effectively be separate arcs per campaign or handled in world lore, but typically arcs are campaign-contained.)
Sessions – Many-to-Many: A story arc is tied to multiple sessions (all that content that arc). Each session can belong to multiple arcs (the intersection of arcs progressed in that session). This many-to-many is managed by the Related Sessions list. It provides the backbone for the arc timeline.
Characters – Many-to-Many: Many characters can be involved in an arc. Conversely, a character can be part of multiple arcs (especially PCs in all main and side quests, or recurring NPCs). This relationship is for documentation; it doesn’t drive function except to list who’s relevant. Possibly specify a role in the arc (like protagonist/antagonist) as metadata, but not necessary.
Factions – Many-to-Many: Similar to characters. E.g., a war arc might involve two factions. Link them so that on the faction page you could also see arcs they are involved in (like “Civil War (Ongoing)”).
Locations – Many-to-Many: Arcs can revolve around or heavily feature certain locations. (For example, “Journey through the Underdark” arc involves multiple Underdark locations.) Linking helps because on a location page you could list arcs that location is part of (like “Part of The Underdark Expedition arc.”).
Items – Many-to-Many: If an item is the objective or key to an arc, link it. E.g., “Reassemble the Shattered Sword” arc would involve the Shattered Sword item (or pieces as separate items). The item page then also references that arc.
Inter-Arc Relationships – Optional: Sometimes arcs have sub-arcs or dependencies (e.g., “Act I”, “Act II” of a main arc, or a side quest that feeds into a main quest). We could allow arcs to link to other arcs (one-to-many as sub-arcs). But to keep it simple, this might be indicated by Type or naming rather than a formal link. If needed, a field like Parent Arc could be introduced for hierarchical arcs.
User (Creator) – Many-to-One: The user who created the arc entry (the GM usually). If arcs could be suggested by players (like “my personal goal”), the player might create it which the GM approves. Typically GM-managed.
AI Integration
Arc Detection and Suggestion: The AI automatically infers potential story arcs from the campaign narrative. If it notices a string of sessions dealing with related events or a character’s ongoing subplot, it might prompt: “It looks like there’s a developing story around Alice’s search for her father. Create a Story Arc for this?”. Upon approval, it can generate a draft Title (like “Lost Father Arc”) and Description summarizing what the arc entails so far. This helps ensure emergent narratives are formally tracked, even if the GM didn’t plan them from the start.
Timeline Auto-Building: For an arc’s timeline of events, AI can gather from each related session summary the relevant pieces and populate the Progress Timeline. It might produce entries like: “Session 3: Alice learned her father might be alive, kicking off the search.”, “Session 6: Clue found – a ring with her family crest.”. The GM can edit these, but it saves time in documenting the arc’s progression.
Clue Management: Especially in mystery arcs, the AI is great at extracting clues. If an arc is marked as investigative, the AI will note each potential clue or mystery from sessions and list them in the Clues/Mysteries field. It can also mark them resolved when evidence surfaces. For example, “Who is the murderer?” is a mystery, and once revealed in Session 10, the AI can mark it solved and even fill the Resolution or update description accordingly.
Next Steps Suggestions: The AI, given the state of an arc, can propose possible next events. This is similar to the planning assistance but focused on the arc’s context. E.g., “The party has gathered all three keys. Next, they might confront the Lich King. Suggestion: The Lich King ambushes them as they perform the unlocking ritual, to raise the stakes.”. These suggestions (written into the Next Steps GM-only field or as a pop-up) help GMs consider dramatic developments. Essentially, the AI serves as a co-writer, aware of pacing and narrative structure.
Cross-Arc Consistency: If multiple arcs overlap, the AI helps maintain clarity. For instance, if the Main Plot Arc is to stop a war and a Character Arc is about one PC’s revenge, and they intersect (the revenge target is the war’s villain), the AI can remind or incorporate one into the other’s notes. It might note on the main arc “(This ties into Alice’s Revenge arc as the villain is the same character)”. This ensures the blueprint acknowledges narrative intersections.
Emphasizing Themes: Each arc often has themes (e.g., redemption, sacrifice, betrayal). The AI can pick up on those from the content and ensure summaries or dialog it generates for that arc reflect them. It could also tag the arc with these themes. This is subtle but adds depth – for example, in a recap the AI might highlight “This arc tested the characters’ trust in each other (theme of trust)”.
Player Engagement via AI: Players might query the status of arcs through the chatbot: “What unresolved plot threads do we have?”. The AI, with caution not to spoil, could list arcs that the players are aware of and their status: “You are in the middle of investigating the Lost Heir (ongoing), and you still have to deal with the Dragon’s Uprising (main quest, ongoing). The matter of the Cursed Crown was resolved when you broke the curse (completed).”. This keeps players on the same page story-wise, effectively letting them ask the “story so far” in parts.
Dynamic Story Adaptation: If players do something unexpected that might prematurely end or drastically alter an arc, the AI can help adjust. For example, they kill a villain much earlier than anticipated. The AI might suggest how the arc could pivot: “Villain X was a linchpin of the 'Shadow Conspiracy' arc; with him gone, perhaps his second-in-command takes up the cause, or maybe that arc concludes early with unanswered questions that lead into a new arc.”. It thus helps the GM reorganize the narrative structure on the fly, keeping the campaign cohesive.
Documentation and Summaries: Finally, once an arc is completed, the AI can draft a Resolution summary encapsulating that storyline’s outcome. This can be used for campaign logs or even as part of an epilogue. For instance: “In the Dragon’s Uprising arc, the heroes successfully uncovered the dragon’s plot and defeated it in the Battle of Highreach. The northern lords pledged loyalty again, and peace was restored to the kingdom, though the scars of war remain.” Such text saves the GM time and provides a satisfying closure write-up to share or keep.
Narrative Balance: The AI might also analyze arcs to ensure each player/character has some arc involving them (directly or indirectly). If one PC hasn’t had spotlight in any arc, the AI could flag that and even suggest an arc tailored to them. This directly supports the player-GM relationship by encouraging balanced storytelling (e.g., “Notice: The character Luna hasn’t had a personal storyline yet. Perhaps incorporate her backstory about the Arcane Library as a new arc.”).
Sources: The system’s design is informed by the concept of a “living campaign wiki” where sessions automatically generate lore entries and linkages
thedailydungeonmaster.com
. Each lore entity (characters, locations, factions, items) includes descriptions, appearances in sessions, and relationships to others, enabling the campaign to organically document itself
thedailydungeonmaster.com
. The UI outline draws from known campaign management tools and reviews of RPG Archivist’s features, such as real-time session timelines, world maps, and collaborative player access with editing/commenting capabilities
thedailydungeonmaster.com
thedailydungeonmaster.com
. AI integration is envisioned to enhance each entity: from summarizing transcripts and suggesting narrative arcs, to assisting with worldbuilding and ensuring consistency, aligning with emerging practices in AI-assisted tabletop RPG management
arxiv.org
.