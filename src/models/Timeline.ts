/**
 * Timeline Models
 * 
 * This file contains the core timeline models for the Dual Timeline System
 * in RPG Scribe, providing interfaces for timeline entries, conflicts,
 * and validation.
 */

import { BaseEntity, BaseEntityCreationParams, BaseEntityUpdateParams } from './BaseEntity';
import { EntityType } from './EntityType';
import {
  TimeGap,
  TimelinePosition,
  TimelineConflict,
  TimelineValidationResult,
  TimelineAISuggestion,
  DualTimestamp
} from '../types/timeline';
import { TimelineEntry as ITimelineEntry } from './Timeline';
import { TimelineEntryType } from '../constants/timelineConstants';

/**
 * Timeline Entry interface
 * Extends BaseEntity with timeline-specific properties
 */
export interface TimelineEntry extends BaseEntity {
  // Entity type identifier
  entityType: EntityType.EVENT; // Timeline entries are a type of event

  // Timeline-specific properties
  entryType: TimelineEntryType;
  position: TimelinePosition;
  dualTimestamp: DualTimestamp;
  duration?: TimeGap;
  
  // Associated entity information
  associatedEntityId: string;    // ID of the entity this timeline entry represents
  associatedEntityType: string;  // Type of the associated entity
  
  // Timeline context
  participants?: string[];       // IDs of participating entities (characters, NPCs)
  locationId?: string;          // Location where this occurred
  sessionId?: string;           // Session this entry belongs to
  storyArcId?: string;          // Story arc this entry is part of
  
  // Content
  title: string;                // Display title for the timeline entry
  summary?: string;             // Brief summary of what happened
  outcome?: string;             // Result or outcome of this entry
  
  // Metadata
  isSecret?: boolean;           // Whether this is GM-only information
  importance?: number;          // Importance level (1-10)
  
  // AI and automation
  isAutoGenerated?: boolean;    // Whether this was auto-generated
  aiSuggestions?: TimelineAISuggestion[]; // AI suggestions for this entry
  
  // Validation
  lastValidated?: Date;         // When this entry was last validated
  validationStatus?: 'valid' | 'warning' | 'error'; // Current validation status
  hasConflicts?: boolean; // Whether this entry has conflicts
}

/**
 * Timeline Entry creation parameters
 */
export interface TimelineEntryCreationParams extends BaseEntityCreationParams {
  entryType: TimelineEntryType;
  associatedEntityId: string;
  associatedEntityType: string;
  title: string;
  position?: Partial<TimelinePosition>;
  dualTimestamp?: Partial<DualTimestamp>;
  duration?: TimeGap;
  participants?: string[];
  locationId?: string;
  sessionId?: string;
  storyArcId?: string;
  summary?: string;
  outcome?: string;
  isSecret?: boolean;
  importance?: number;
}

/**
 * Timeline Entry update parameters
 */
export interface TimelineEntryUpdateParams extends BaseEntityUpdateParams {
  entryType?: TimelineEntryType;
  title?: string;
  position?: Partial<TimelinePosition>;
  dualTimestamp?: Partial<DualTimestamp>;
  duration?: TimeGap;
  participants?: string[];
  locationId?: string;
  sessionId?: string;
  storyArcId?: string;
  summary?: string;
  outcome?: string;
  isSecret?: boolean;
  importance?: number;
  validationStatus?: 'valid' | 'warning' | 'error';
}

/**
 * Timeline Conflict Model
 * Represents conflicts detected in the timeline
 */
export interface TimelineConflictModel extends BaseEntity {
  // Entity type identifier
  entityType: EntityType.EVENT; // Conflicts are stored as events
  
  // Conflict-specific properties
  conflict: TimelineConflict;
  
  // Resolution tracking
  isResolved?: boolean;
  resolvedAt?: Date;
  resolvedBy?: string;
  resolutionMethod?: 'manual' | 'auto' | 'ai_suggested';
  resolutionNotes?: string;
}

/**
 * Timeline Validation Model
 * Represents validation results for timeline segments
 */
export interface TimelineValidationModel extends BaseEntity {
  // Entity type identifier
  entityType: EntityType.EVENT; // Validations are stored as events
  
  // Validation-specific properties
  validationResult: TimelineValidationResult;
  
  // Scope of validation
  validatedEntityIds: string[];  // Entities that were validated
  validatedTimeRange: {
    startDate: Date;
    endDate: Date;
  };
  
  // Validation metadata
  validationType: 'manual' | 'auto' | 'scheduled';
  validationTrigger?: string;    // What triggered this validation
}

/**
 * Timeline AI Suggestion Model
 * Represents AI-generated suggestions for timeline improvements
 */
export interface TimelineAISuggestionModel extends BaseEntity {
  // Entity type identifier
  entityType: EntityType.EVENT; // Suggestions are stored as events
  
  // Suggestion-specific properties
  suggestion: TimelineAISuggestion;
  
  // Application tracking
  isApplied?: boolean;
  appliedAt?: Date;
  appliedBy?: string;
  applicationResult?: 'success' | 'failed' | 'partial';
  applicationNotes?: string;
  
  // Feedback
  userFeedback?: 'helpful' | 'not_helpful' | 'incorrect';
  feedbackNotes?: string;
}

/**
 * Timeline Template Model
 * Represents reusable timeline templates for common scenarios
 */
export interface TimelineTemplate extends BaseEntity {
  // Entity type identifier
  entityType: EntityType.EVENT; // Templates are stored as events
  
  // Template-specific properties
  templateType: 'session' | 'story_arc' | 'travel' | 'downtime' | 'custom';
  templateEntries: Omit<TimelineEntryCreationParams, 'campaignId' | 'worldId'>[];
  
  // Template metadata
  isPublic?: boolean;           // Whether this template can be shared
  usageCount?: number;          // How many times this template has been used
  rating?: number;              // User rating (1-5)
  
  // Template settings
  defaultTimeGaps?: TimeGap[];  // Default time gaps between entries
  requiredFields?: string[];    // Fields that must be filled when using template
  optionalFields?: string[];    // Fields that are optional when using template
}

/**
 * Timeline Bulk Operation Model
 * Represents bulk operations performed on timeline entries
 */
export interface TimelineBulkOperation extends BaseEntity {
  // Entity type identifier
  entityType: EntityType.EVENT; // Bulk operations are stored as events
  
  // Operation-specific properties
  operationType: 'move' | 'adjust_time' | 'merge' | 'split' | 'delete' | 'update';
  affectedEntityIds: string[];
  operationParameters: Record<string, any>;
  
  // Execution tracking
  status: 'pending' | 'in_progress' | 'completed' | 'failed' | 'cancelled';
  startedAt?: Date;
  completedAt?: Date;
  errorMessage?: string;
  
  // Results
  successCount?: number;
  failureCount?: number;
  skippedCount?: number;
  resultSummary?: string;
  
  // Rollback information
  canRollback?: boolean;
  rollbackData?: Record<string, any>;
}
